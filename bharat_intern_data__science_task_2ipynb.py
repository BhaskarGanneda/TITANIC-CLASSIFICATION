# -*- coding: utf-8 -*-
"""Bharat_Intern_Data__Science_Task_2ipynb.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13PJWnnRbTev613UNNpXkzgSswUvSGsvq

## **TASK-2. TITANIC CLASSIFICATION :**

Make a system which tells whether the person will be
save from sinking. What factors were
most likely lead to success-socio-economic
status, age, gender and more.
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split

"""

---

**Step 1: Data Collection**

---

"""

titanic = sns.load_dataset("titanic")

titanic.head()

titanic.to_csv("titanic.csv",index = False)

titanic.shape

titanic.info()

titanic.columns

"""

---

**Step 2: Data Preprocessing**

---
"""

titanic.isnull().sum()

titanic['age'] = titanic['age'].fillna(titanic['age'].mean())

titanic['embarked'] = titanic['embarked'].fillna(titanic['embarked'].mode().iloc[0])
titanic['embark_town'] = titanic['embark_town'].fillna(titanic['embark_town'].mode().iloc[0])

titanic.isnull().sum()

titanic.drop(columns=['deck'],inplace = True)

titanic.head()

# Use .astype() to change data type of a column
titanic['age'] = titanic['age'].astype(int)

# change values based on conditions
titanic.loc[titanic['sex'] == 'male', 'sex'] = 'M'
titanic.loc[titanic['sex'] == 'female', 'sex'] = 'F'

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()

# Reshape 'age' column to a 2D array
fare_2d = titanic['fare'].values.reshape(-1, 1)

# Fit and transform the 'age' column
titanic['fare'] = scaler.fit_transform(fare_2d)

titanic.head()

titanic['who'].value_counts()

"""

---



---

**Data Visualization**

---



---
"""

# Group data by 'pclass' and 'alive', and calculate the number of survivors in each class
pclass_survived = titanic.groupby(['pclass', 'alive'])['alive'].count().unstack()

# Create the bar plot
plt.figure(figsize=(6,6))
sns.barplot(x=pclass_survived.index, y=pclass_survived['yes'], label='Survived',color='green')
sns.barplot(x=pclass_survived.index, y=pclass_survived['no'], bottom=pclass_survived['yes'], label='Not Survived',color='red')

# Add labels and title
plt.xlabel('Passenger Class')
plt.ylabel('Count')
plt.title('Survival Count by Passenger Class')
plt.legend(title='Survival Count', loc='upper left')

plt.show();

"""

---

HISTOGRAM

---
"""

# Create a histogram
plt.rcParams['figure.figsize'] = (12,8)

plt.subplot(2,2,1)
sns.histplot(titanic['age'], bins=20, color ='lightgreen' ,edgecolor='green')
plt.xlabel('Age of Passengers')
plt.ylabel('Frequency')
plt.title('Age Distribution')


plt.subplot(2,2,2)
sns.histplot(titanic['fare'], bins=20, color = 'lightblue' ,edgecolor='blue')
plt.xlabel('Fair Values')
plt.ylabel('Frequency')
plt.title('Fair Distribution')

plt.show();

# Create a bar plot
sns.barplot(x='sex', y='survived', data=titanic,edgecolor='black')

# Add labels and title
plt.xlabel('Gender')
plt.ylabel('Survived')
plt.title('Survival Count by Gender')

# Show the plot
plt.show()

# Calculate survival count for each class
survival_counts = titanic.groupby('class')['survived'].sum()

# Create a pie chart
patches, texts, autotexts = plt.pie(survival_counts, labels=survival_counts.index, autopct='%1.1f%%', startangle=140)

# Set the edge color for each pie slice
for patch in patches:
    patch.set_edgecolor('black')

# Add title
plt.title('Survival Percentage by Class')

# Show the plot
plt.axis('equal')
plt.show()

# Calculate survival count for each class
survival_counts = titanic.groupby('survived')['class']
survival_counts.head()

titanic['alive'].value_counts()

#sort the ages into logical categories
titanic["age"] = titanic["age"].fillna(-0.5)

bins = [-1, 0, 5, 12, 18, 24, 35, 60, np.inf]
labels = ['Unknown', 'Baby', 'Child', 'Teenager', 'Student', 'Young Adult', 'Adult', 'Senior']
titanic['agegroup'] = pd.cut(titanic["age"], bins, labels = labels)


#draw a bar plot of Age vs. survival
sns.barplot(y="agegroup", x="survived", data=titanic ,edgecolor = 'black')
plt.ylabel("Age Group")
plt.xlabel("Survived")
plt.show();

titanic['agegroup']

# Calculate survival count for each class
survival_counts = titanic.groupby('sex')['class']

# Create a countplot
sns.countplot(x='sex', hue='class', data=titanic,edgecolor = 'black')

# Add title and labels
plt.xlabel('Class')
plt.ylabel('Count')
plt.title('Survival Count by Class and Sex')


plt.show();

#draw a bar plot of survival by Pclass
sns.barplot(x="pclass", y="survived", data=titanic, edgecolor = 'black')
plt.show();

print("------------------------------------------------------------------------------------------------------------------------")
print("-------------- ------------------Percentage of People by Pclass that Survived-------------------------------------------")
#print percentage of people by Pclass that survived
print("Percentage of Pclass = 1 who survived:", titanic["survived"][titanic["pclass"] == 1].value_counts(normalize = True)[1]*100)

print("Percentage of Pclass = 2 who survived:", titanic["survived"][titanic["pclass"] == 2].value_counts(normalize = True)[1]*100)

print("Percentage of Pclass = 3 who survived:", titanic["survived"][titanic["pclass"] == 3].value_counts(normalize = True)[1]*100)

print("------------------------------------------------------------------------------------------------------------------------")

#draw a bar plot for SibSp vs. survival
sns.barplot(x="sibsp", y="survived", data=titanic,edgecolor = 'black')
plt.show();
#Individual percent values for all of these.
print("Percentage of SibSp = 0 who survived:", titanic["survived"][titanic["sibsp"] == 0].value_counts(normalize = True)[1]*100)

print("Percentage of SibSp = 1 who survived:", titanic["survived"][titanic["sibsp"] == 1].value_counts(normalize = True)[1]*100)

print("Percentage of SibSp = 2 who survived:", titanic["survived"][titanic["sibsp"] == 2].value_counts(normalize = True)[1]*100)

# Calculate survival count for each class
titanic['survived'] = titanic['survived'].replace({0: 'No',1: 'Yes'})
survival_counts = titanic.groupby('sex')['survived']

# Create a countplot
sns.countplot(x='class', hue='survived', data=titanic, palette=['red','green'],edgecolor = 'black')

# Add title and labels
plt.xlabel('Class')
plt.ylabel('Count')
plt.title('Survival Count by Class')
plt.legend()

# Show the plot
plt.show();

plt.rcParams['figure.figsize'] = (12,6)

#Calculating gender distribution among the passengers on the titanic
plt.subplot(2,2,1)
gender_dist = titanic["sex"].value_counts()
gender_dist

sns.barplot(y = gender_dist.values,x = gender_dist.index,color = 'coral',edgecolor='red')

plt.xlabel("Sex")
plt.ylabel("Counts")
plt.title("Gender Distribution among Passengers on the Titanic")

#survival rate differ by the gender
plt.subplot(2,2,2)
survival_by_gender = titanic.groupby("sex")["survived"]
print(survival_by_gender)

x = len(titanic[titanic.sex=="M"])
y = len(titanic[titanic.sex=="F"])

plt.bar(["Male","Female"],[x,y],color = "lightgreen",edgecolor='green')
plt.ylabel("Survival Rate")

plt.title("Survival Rate Differ by Gender")

plt.show();

#draw a bar plot for Parch vs. survival
sns.barplot(y="parch", x="survived", data=titanic,edgecolor = 'black')
plt.show();

pclass_survival = titanic.groupby('pclass')['sex']

# Create a countplot
sns.countplot(x='sex', hue='pclass', data=titanic, palette=['green','orange','red'],edgecolor = 'black')

# Add title and labels
plt.xlabel('PClass')
plt.ylabel('Count')
plt.title('Survival Count by PClass')
plt.legend()

# Show the plot
plt.show();

plt.figure(figsize=(15,6))
sns.boxplot(titanic)

"""

---

**Step 3: Model Selection**


---
"""

from sklearn.ensemble import RandomForestClassifier

# Initialize the Random Forest Classifier
rfc = RandomForestClassifier()

"""

---

**Step 4: Model Training**

---
"""

lb = LabelEncoder()

titanic['sex'] = lb.fit_transform(titanic['sex'])
titanic['class'] = lb.fit_transform(titanic['class'])
titanic['alive'] = lb.fit_transform(titanic['alive'])
titanic['alone'] = lb.fit_transform(titanic['alone'])
titanic['embarked'] = lb.fit_transform(titanic['embarked'])
titanic['survived'] = lb.fit_transform(titanic['survived'])
titanic['agegroup'] = lb.fit_transform(titanic['agegroup'])

titanic

X = titanic.drop(columns=['alive','who','adult_male','embark_town','survived','fare'])
y = titanic['survived']

X_train,X_test,y_train,y_test = train_test_split(X,y,test_size = 0.2,random_state = 42)

print("The Shape of X_train :",X_train.shape)
print("The Shape of X_test :",X_test.shape)
print("The Shape of y_train :",y_train.shape)
print("The Shape of y_test :",y_test.shape)

rfc.fit(X_train,y_train)

y_pred = rfc.predict(X_test)

"""

---

**Step 5: Model Evaluation**

---
"""

# Evaluate the model using metrics like accuracy, precision, recall, and F1-score
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score

accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)

precision = precision_score(y_test, y_pred)
print("Precision:", precision)

recall = recall_score(y_test, y_pred)
print("Recall:", recall)

f1 = f1_score(y_test, y_pred)
print("F1-score:", f1)

"""

---


**Step 6: Feature Importance Analysis**

---
"""

# Access the feature importances from the trained model
feature_importances = rfc.feature_importances_

# Sort the feature importances in descending order
sorted_feature_importances = np.sort(feature_importances)
sorted_feature_names = np.array(X_train.columns)[np.argsort(feature_importances)]

# Create a bar plot of the feature importances
plt.barh(sorted_feature_names, sorted_feature_importances,edgecolor = 'blue')
plt.ylabel('Feature Name')
plt.xlabel('Feature Importance')
plt.show()

